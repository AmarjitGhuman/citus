-- ===================================================================
-- test multi subquery functionality for window functions
-- ===================================================================
CREATE VIEW subq AS
SELECT
  DISTINCT user_id, rank() OVER (PARTITION BY user_id ORDER BY value_1)
FROM
  users_table
GROUP BY
  user_id, value_1
HAVING count(*) > 1;
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS (PARTITION BY user_id ORDER BY time DESC)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |              time               | rnk
---------------------------------------------------------------------
       2 | Wed Nov 22 20:16:16.614779 2017 |  47
       2 | Wed Nov 22 20:16:16.614779 2017 |  47
       2 | Wed Nov 22 22:06:12.107108 2017 |  45
       2 | Wed Nov 22 22:06:12.107108 2017 |  45
       2 | Wed Nov 22 22:23:25.40611 2017  |  43
       2 | Wed Nov 22 22:23:25.40611 2017  |  43
       3 | Wed Nov 22 18:36:16.372893 2017 |  41
       3 | Wed Nov 22 18:36:16.372893 2017 |  41
       2 | Wed Nov 22 22:50:33.855696 2017 |  41
       2 | Wed Nov 22 22:50:33.855696 2017 |  41
(10 rows)

-- the same test with different syntax
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER (PARTITION BY user_id ORDER BY time DESC) as rnk
  FROM
    events_table
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |              time               | rnk
---------------------------------------------------------------------
       2 | Wed Nov 22 20:16:16.614779 2017 |  47
       2 | Wed Nov 22 20:16:16.614779 2017 |  47
       2 | Wed Nov 22 22:06:12.107108 2017 |  45
       2 | Wed Nov 22 22:06:12.107108 2017 |  45
       2 | Wed Nov 22 22:23:25.40611 2017  |  43
       2 | Wed Nov 22 22:23:25.40611 2017  |  43
       3 | Wed Nov 22 18:36:16.372893 2017 |  41
       3 | Wed Nov 22 18:36:16.372893 2017 |  41
       2 | Wed Nov 22 22:50:33.855696 2017 |  41
       2 | Wed Nov 22 22:50:33.855696 2017 |  41
(10 rows)

-- similar test with lag
SELECT
   user_id, time, lag_event_type, row_no
FROM
(
  SELECT
    *, lag(event_type) OVER my_win  as lag_event_type, row_number() OVER my_win as row_no
  FROM
    events_table WINDOW my_win AS (PARTITION BY user_id ORDER BY time DESC)
) as foo
ORDER BY
  4 DESC, 3 DESC NULLS LAST, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |              time               | lag_event_type | row_no
---------------------------------------------------------------------
       2 | Wed Nov 22 20:16:16.614779 2017 |              0 |     48
       2 | Wed Nov 22 20:16:16.614779 2017 |              0 |     47
       2 | Wed Nov 22 22:06:12.107108 2017 |              0 |     46
       2 | Wed Nov 22 22:06:12.107108 2017 |              3 |     45
       2 | Wed Nov 22 22:23:25.40611 2017  |              3 |     44
       2 | Wed Nov 22 22:23:25.40611 2017  |              4 |     43
       2 | Wed Nov 22 22:50:33.855696 2017 |              4 |     42
       3 | Wed Nov 22 18:36:16.372893 2017 |              2 |     42
       2 | Wed Nov 22 22:50:33.855696 2017 |              4 |     41
       3 | Wed Nov 22 18:36:16.372893 2017 |              3 |     41
(10 rows)

-- simple window function, partitioned and grouped by on the distribution key
SELECT
   user_id, rnk, avg_val_2
FROM
(
  SELECT
    user_id, rank() OVER my_win as rnk, avg(value_2) as avg_val_2
  FROM
    events_table
  GROUP BY
    user_id,  date_trunc('day', time)
  WINDOW my_win AS (PARTITION BY user_id ORDER BY avg(event_type) DESC)
) as foo
ORDER BY
  2 DESC, 1 DESC, 3 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | rnk |     avg_val_2
---------------------------------------------------------------------
       6 |   2 | 2.0000000000000000
       5 |   2 | 2.0909090909090909
       4 |   2 | 2.4000000000000000
       3 |   2 | 3.1666666666666667
       2 |   2 | 2.0000000000000000
       1 |   2 | 2.1428571428571429
       6 |   1 | 2.5000000000000000
       5 |   1 | 2.6666666666666667
       4 |   1 | 2.5000000000000000
       3 |   1 | 1.8000000000000000
(10 rows)

-- top level query has a group by on the result of the window function
SELECT
   min(user_id), min(time), lag_event_type, count(*)
FROM
(
  SELECT
    *, lag(event_type) OVER my_win  as lag_event_type
  FROM
    events_table WINDOW my_win AS (PARTITION BY user_id ORDER BY time DESC)
) as foo
GROUP BY
  lag_event_type
ORDER BY
  3 DESC NULLS LAST, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 min |               min               | lag_event_type | count
---------------------------------------------------------------------
   1 | Thu Nov 23 11:09:38.074595 2017 |              6 |     2
   2 | Wed Nov 22 19:00:10.396739 2017 |              5 |    14
   1 | Wed Nov 22 18:49:42.327403 2017 |              4 |    42
   1 | Wed Nov 22 18:36:16.372893 2017 |              3 |    44
   1 | Wed Nov 22 18:36:16.372893 2017 |              2 |    36
   1 | Wed Nov 22 19:03:01.772353 2017 |              1 |    47
   1 | Wed Nov 22 20:16:16.614779 2017 |              0 |    11
   1 | Thu Nov 23 14:00:13.20013 2017  |                |     6
(8 rows)

-- window functions should work along with joins as well
SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w1
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 4
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time)
) as foo
ORDER BY 3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
 user_id | lag | rank
---------------------------------------------------------------------
       2 |   2 |  433
       5 |   5 |  417
       3 |   3 |  409
       2 |   2 |  361
       3 |   3 |  341
       5 |   5 |  313
       2 |   2 |  289
       4 |   4 |  277
       3 |   3 |  273
       2 |   2 |  217
(10 rows)

-- two window functions in a single subquery should work fine as well
SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 4
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id, (events_table.value_2 % 25) ORDER BY events_table.time)
) as foo
ORDER BY 3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
 user_id | lag | rank
---------------------------------------------------------------------
       2 |   2 |  289
       4 |   4 |  277
       3 |   3 |  273
       2 |   2 |  217
       5 |   5 |  209
       5 |     |  209
       3 |   3 |  205
       4 |   4 |  185
       2 |   2 |  145
       3 |   3 |  137
(10 rows)

-- window functions should be fine within subquery joins
SELECT sub_1.user_id, max(lag_1), max(rank_1), max(rank_2) FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1 as lag_1, rank() OVER w2 as rank_1
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 4
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id, (events_table.value_2 % 25) ORDER BY events_table.time)
) as sub_1
JOIN
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1 as lag_2, rank() OVER w2 as rank_2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 4
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.value_2 ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id, (events_table.value_2 % 50) ORDER BY events_table.time)
) as sub_2
 ON(sub_1.user_id = sub_2.user_id)
 GROUP BY
  sub_1.user_id
 ORDER BY 3 DESC, 4 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
WARNING:  list_length before removal: 6
WARNING:  list_length after removal: 3
 user_id | max | max | max
---------------------------------------------------------------------
       2 |   2 | 289 | 289
       4 |   4 | 277 | 277
       3 |   3 | 273 | 273
       5 |   5 | 209 | 209
       6 |   6 |  81 |  81
       1 |   1 |  57 |  57
(6 rows)

-- GROUP BYs and PARTITION BYs should work fine together
SELECT
   avg(user_id), max(time), my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (PARTITION BY user_id ORDER BY count(*) DESC)
) as foo
WHERE
  my_rank > 1
GROUP BY
  my_rank
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
        avg         |           max            | my_rank
---------------------------------------------------------------------
 3.5000000000000000 | Wed Nov 22 00:00:00 2017 |       2
(1 row)

-- aggregates in the PARTITION BY is also allows
SELECT
   avg(user_id), max(time), my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (PARTITION BY user_id, avg(event_type%3)::int ORDER BY count(*) DESC)
) as foo
WHERE
  my_rank > 0
GROUP BY
  my_rank
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
        avg         |           max            | my_rank
---------------------------------------------------------------------
 3.7500000000000000 | Wed Nov 22 00:00:00 2017 |       2
 3.3750000000000000 | Thu Nov 23 00:00:00 2017 |       1
(2 rows)

-- GROUP BY should not necessarly be inclusive of partitioning
-- but this query doesn't make much sense
SELECT
   avg(user_id), my_rank
FROM
(
  SELECT
    user_id, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id
    WINDOW my_win AS (PARTITION BY user_id, max(event_type) ORDER BY count(*) DESC)
) as foo
GROUP BY
  my_rank
ORDER BY
  2 DESC, 1 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
        avg         | my_rank
---------------------------------------------------------------------
 3.5000000000000000 |       1
(1 row)

  -- Using previously defined supported window function on distribution key
SELECT * FROM (
  SELECT
    user_id, date_trunc('day', time) as time, sum(rank) OVER w2
  FROM (
    SELECT DISTINCT
      user_id as user_id, time, rank() over w1
    FROM users_table
    WINDOW
      w AS (PARTITION BY user_id),
      w1 AS (w ORDER BY value_2, value_3)
  ) fab
  WINDOW
    w2 as (PARTITION BY user_id, time)
) a
ORDER BY
  1, 2, 3 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |           time           | sum
---------------------------------------------------------------------
       1 | Wed Nov 22 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |  13
       1 | Thu Nov 23 00:00:00 2017 |  11
       1 | Thu Nov 23 00:00:00 2017 |   9
       1 | Thu Nov 23 00:00:00 2017 |   7
       1 | Thu Nov 23 00:00:00 2017 |   5
       1 | Thu Nov 23 00:00:00 2017 |   3
       2 | Wed Nov 22 00:00:00 2017 |  33
       2 | Thu Nov 23 00:00:00 2017 |  35
       2 | Thu Nov 23 00:00:00 2017 |  31
(10 rows)

-- test with reference table partitioned on columns from both
SELECT *
FROM
(
    SELECT
      DISTINCT user_id, it_name, count(id) OVER (PARTITION BY user_id, id)
    FROM
      users_table, users_ref_test_table
    WHERE users_table.value_2 + 40 = users_ref_test_table.k_no
) a
ORDER BY
  1, 2, 3
LIMIT
  20;
ERROR:  relation "users_ref_test_table" does not exist
-- Group by has more columns than partition by
SELECT * FROM (
  SELECT
    DISTINCT user_id, SUM(value_2) OVER (PARTITION BY user_id)
  FROM
    users_table
  GROUP BY
    user_id, value_1, value_2
) a
ORDER BY
  2 DESC, 1
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | sum
---------------------------------------------------------------------
       3 |  44
       5 |  43
       4 |  41
       2 |  38
       1 |  16
       6 |  16
(6 rows)

SELECT user_id, max(sum) FROM (
  SELECT
    user_id, SUM(value_2) OVER (PARTITION BY user_id, value_1)
  FROM
    users_table
  GROUP BY
    user_id, value_1, value_2
) a
GROUP BY user_id ORDER BY
  2 DESC,1
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | max
---------------------------------------------------------------------
       3 |  15
       4 |  13
       2 |  10
       5 |  10
       6 |   7
       1 |   6
(6 rows)

-- Window functions with HAVING clause
SELECT * FROM (
  SELECT
    DISTINCT user_id, rank() OVER (PARTITION BY user_id ORDER BY value_1)
  FROM
    users_table
  GROUP BY
    user_id, value_1 HAVING count(*) > 1
) a
ORDER BY
  2 DESC, 1
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | rank
---------------------------------------------------------------------
       3 |    6
       4 |    6
       5 |    6
       2 |    5
       3 |    5
       4 |    5
       5 |    5
       6 |    5
       1 |    4
       2 |    4
(10 rows)

-- Window function in View works
SELECT *
FROM
  subq
ORDER BY
  2 DESC, 1
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | rank
---------------------------------------------------------------------
       3 |    6
       4 |    6
       5 |    6
       2 |    5
       3 |    5
       4 |    5
       5 |    5
       6 |    5
       1 |    4
       2 |    4
(10 rows)

-- Window functions with UNION/UNION ALL works
SELECT
  max(avg)
FROM
(
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (1, 2))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (2, 3))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (3, 4))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (4, 5))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (5, 6))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (1, 6))
) b
GROUP BY user_id
ORDER BY 1 DESC
LIMIT 5;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 max
---------------------------------------------------------------------
    5
  3.5
 3.25
    3
    3
(5 rows)

SELECT *
FROM (
        ( SELECT user_id,
                 sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              events_table) user_id_1
         GROUP BY
          user_id)
      UNION
        (SELECT
            user_id, sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              events_table) user_id_2
         GROUP BY
            user_id)) AS ftop
ORDER BY 2 DESC, 1 DESC
LIMIT 5;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | sum
---------------------------------------------------------------------
       2 | 214
       3 | 202
       5 | 188
       4 | 182
       1 | 124
(5 rows)

-- Subquery in where with window function
SELECT
  user_id
FROM
  users_table
WHERE
  value_2 > 1 AND
  value_2 < ALL (
    SELECT
      avg(value_3) OVER (PARTITION BY user_id)
    FROM
      events_table
    WHERE
      users_table.user_id = events_table.user_id
  )
GROUP BY
  user_id
ORDER BY
  user_id DESC
LIMIT
  3;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id
---------------------------------------------------------------------
       4
       3
       2
(3 rows)

-- Some more nested queries
SELECT
  user_id, rank, SUM(ABS(value_2 - value_3)) AS difference, COUNT(*) AS distinct_users
FROM (
  SELECT
    *, rank() OVER (PARTITION BY user_id ORDER BY value_2 DESC)
  FROM (
    SELECT
      user_id, value_2, sum(value_3) OVER (PARTITION BY user_id, value_2) as value_3
    FROM users_table
  ) AS A
) AS A
GROUP BY
  user_id, rank
ORDER BY
  difference DESC, rank DESC, user_id
LIMIT 20;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | rank | difference | distinct_users
---------------------------------------------------------------------
       4 |   23 |       1242 |             18
       5 |   23 |        576 |             16
       3 |    1 |        396 |             12
       5 |   39 |        290 |             10
       3 |   21 |        240 |             10
       2 |    5 |        200 |             10
       2 |   21 |        192 |              8
       5 |   13 |        150 |             10
       2 |   15 |        114 |              6
       5 |    7 |        108 |              6
       4 |    5 |        100 |             10
       2 |   29 |         90 |              6
       4 |   41 |         84 |              6
       6 |   17 |         80 |              4
       5 |    1 |         66 |              6
       3 |   31 |         60 |              4
       1 |    1 |         60 |              6
       4 |   15 |         54 |              6
       1 |    7 |         44 |              4
       6 |   13 |         36 |              4
(20 rows)

SELECT * FROM (
  SELECT DISTINCT
    f3.user_id, ABS(f2.sum - f3.sum)
  FROM (
    SELECT DISTINCT
      user_id, sum(value_3) OVER (PARTITION BY user_id)
    FROM
      users_table
    GROUP BY
      user_id, value_3
  ) f3,
  (
  SELECT DISTINCT
    user_id, sum(value_2) OVER (PARTITION BY user_id)
  FROM
    users_table
  GROUP BY
    user_id, value_2
  ) f2
WHERE
  f3.user_id=f2.user_id
) a
ORDER BY
  abs DESC, user_id
LIMIT 10;
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
 user_id | abs
---------------------------------------------------------------------
       6 |   2
       1 |   1
       2 |   0
       3 |   0
       4 |   0
       5 |   0
(6 rows)

-- Partition by with aggregate functions. This query does not make much sense since the
-- result of aggregate function will be the same for every row in a partition and it is
-- not going to affect the group that the count function will work on.
SELECT * FROM (
  SELECT
    user_id, COUNT(*) OVER (PARTITION BY user_id, MIN(value_2))
  FROM
    users_table
  GROUP BY
  1
) a
ORDER BY
  1 DESC
LIMIT
  5;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | count
---------------------------------------------------------------------
       6 |     1
       5 |     1
       4 |     1
       3 |     1
       2 |     1
(5 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE)
    SELECT *
    FROM (
            ( SELECT user_id,
                     sum(counter)
             FROM
               (SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  users_table
              UNION
                SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  events_table) user_id_1
             GROUP BY
              user_id)
          UNION
            (SELECT
                user_id, sum(counter)
             FROM
               (SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  users_table
              UNION
                SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  events_table) user_id_2
             GROUP BY
                user_id)) AS ftop
    ORDER BY 2 DESC, 1 DESC
    LIMIT 5;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      QUERY PLAN
---------------------------------------------------------------------
 Limit
   Output: xxxxxx
   ->  Sort
         Output: xxxxxx
         Sort Key: remote_scan.sum DESC, remote_scan.user_id DESC
         ->  Custom Scan (Citus Adaptive)
               Output: xxxxxx
               Task Count: 4
               Tasks Shown: One of 4
               ->  Task
                     Query: SELECT worker_column_1 AS user_id, worker_column_2 AS sum FROM (SELECT ftop.user_id AS worker_column_1, ftop.sum AS worker_column_2 FROM (SELECT user_id_1.user_id, sum(user_id_1.counter) AS sum FROM (SELECT users_table.user_id, sum(users_table.value_2) OVER (PARTITION BY users_table.user_id) AS counter FROM public.users_table_1400256 users_table UNION SELECT events_table.user_id, sum(events_table.value_2) OVER (PARTITION BY events_table.user_id) AS counter FROM public.events_table_1400260 events_table) user_id_1 GROUP BY user_id_1.user_id UNION SELECT user_id_2.user_id, sum(user_id_2.counter) AS sum FROM (SELECT users_table.user_id, sum(users_table.value_2) OVER (PARTITION BY users_table.user_id) AS counter FROM public.users_table_1400256 users_table UNION SELECT events_table.user_id, sum(events_table.value_2) OVER (PARTITION BY events_table.user_id) AS counter FROM public.events_table_1400260 events_table) user_id_2 GROUP BY user_id_2.user_id) ftop) worker_subquery ORDER BY worker_column_2 DESC, worker_column_1 DESC LIMIT '5'::bigint
                     Node: host=localhost port=xxxxx dbname=regression
                     ->  Limit
                           Output: xxxxxx
                           ->  Sort
                                 Output: xxxxxx
                                 Sort Key: (sum((sum(users_table.value_2) OVER (?)))) DESC, users_table.user_id DESC
                                 ->  HashAggregate
                                       Output: xxxxxx
                                       Group Key: users_table.user_id, (sum((sum(users_table.value_2) OVER (?))))
                                       ->  Append
                                             ->  HashAggregate
                                                   Output: xxxxxx
                                                   Group Key: users_table.user_id
                                                   ->  HashAggregate
                                                         Output: xxxxxx
                                                         Group Key: users_table.user_id, (sum(users_table.value_2) OVER (?))
                                                         ->  Append
                                                               ->  WindowAgg
                                                                     Output: xxxxxx
                                                                     ->  Sort
                                                                           Output: xxxxxx
                                                                           Sort Key: users_table.user_id
                                                                           ->  Seq Scan on public.users_table_1400256 users_table
                                                                                 Output: xxxxxx
                                                               ->  WindowAgg
                                                                     Output: xxxxxx
                                                                     ->  Sort
                                                                           Output: xxxxxx
                                                                           Sort Key: events_table.user_id
                                                                           ->  Seq Scan on public.events_table_1400260 events_table
                                                                                 Output: xxxxxx
                                             ->  HashAggregate
                                                   Output: xxxxxx
                                                   Group Key: users_table_1.user_id
                                                   ->  HashAggregate
                                                         Output: xxxxxx
                                                         Group Key: users_table_1.user_id, (sum(users_table_1.value_2) OVER (?))
                                                         ->  Append
                                                               ->  WindowAgg
                                                                     Output: xxxxxx
                                                                     ->  Sort
                                                                           Output: xxxxxx
                                                                           Sort Key: users_table_1.user_id
                                                                           ->  Seq Scan on public.users_table_1400256 users_table_1
                                                                                 Output: xxxxxx
                                                               ->  WindowAgg
                                                                     Output: xxxxxx
                                                                     ->  Sort
                                                                           Output: xxxxxx
                                                                           Sort Key: events_table_1.user_id
                                                                           ->  Seq Scan on public.events_table_1400260 events_table_1
                                                                                 Output: xxxxxx
(63 rows)

-- test with window functions which aren't pushed down
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS (PARTITION BY event_type ORDER BY time DESC)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |              time               | rnk
---------------------------------------------------------------------
       1 | Wed Nov 22 19:07:03.846437 2017 |  47
       1 | Wed Nov 22 19:07:03.846437 2017 |  47
       5 | Wed Nov 22 20:45:35.99031 2017  |  45
       5 | Wed Nov 22 20:45:35.99031 2017  |  45
       1 | Wed Nov 22 18:49:42.327403 2017 |  45
       1 | Wed Nov 22 18:49:42.327403 2017 |  45
       3 | Wed Nov 22 21:12:24.542921 2017 |  43
       3 | Wed Nov 22 21:12:24.542921 2017 |  43
       3 | Wed Nov 22 20:23:46.906523 2017 |  43
       3 | Wed Nov 22 20:23:46.906523 2017 |  43
(10 rows)

SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS ()
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |              time               | rnk
---------------------------------------------------------------------
       6 | Thu Nov 23 14:00:13.20013 2017  |   1
       6 | Thu Nov 23 14:00:13.20013 2017  |   1
       6 | Thu Nov 23 11:16:13.106691 2017 |   1
       6 | Thu Nov 23 11:16:13.106691 2017 |   1
       6 | Thu Nov 23 07:27:32.822068 2017 |   1
       6 | Thu Nov 23 07:27:32.822068 2017 |   1
       6 | Thu Nov 23 02:06:53.132461 2017 |   1
       6 | Thu Nov 23 02:06:53.132461 2017 |   1
       6 | Thu Nov 23 00:45:41.784391 2017 |   1
       6 | Thu Nov 23 00:45:41.784391 2017 |   1
(10 rows)

SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS (ORDER BY time DESC)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |              time               | rnk
---------------------------------------------------------------------
       3 | Wed Nov 22 18:36:16.372893 2017 | 201
       3 | Wed Nov 22 18:36:16.372893 2017 | 201
       1 | Wed Nov 22 18:49:42.327403 2017 | 199
       1 | Wed Nov 22 18:49:42.327403 2017 | 199
       4 | Wed Nov 22 19:00:10.396739 2017 | 197
       4 | Wed Nov 22 19:00:10.396739 2017 | 197
       1 | Wed Nov 22 19:03:01.772353 2017 | 195
       1 | Wed Nov 22 19:03:01.772353 2017 | 195
       1 | Wed Nov 22 19:07:03.846437 2017 | 193
       1 | Wed Nov 22 19:07:03.846437 2017 | 193
(10 rows)

SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 4
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id+1, (events_table.value_2 % 25) ORDER BY events_table.time)
) as foo
ORDER BY 3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
 user_id | lag | rank
---------------------------------------------------------------------
       2 |   2 |  289
       4 |   4 |  277
       3 |   3 |  273
       2 |   2 |  217
       5 |   5 |  209
       5 |     |  209
       3 |   3 |  205
       4 |   4 |  185
       2 |   2 |  145
       3 |   3 |  137
(10 rows)

SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 4
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (ORDER BY events_table.time)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT
  10;
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
WARNING:  list_length before removal: 2
WARNING:  list_length after removal: 1
 user_id | lag | rank
---------------------------------------------------------------------
       4 |   4 | 5045
       3 |   3 | 4977
       2 |   2 | 4905
       4 |   4 | 4813
       4 |     | 4813
       5 |   5 | 4709
       5 |   5 | 4605
       5 |   5 | 4501
       4 |   4 | 4409
       2 |   2 | 4337
(10 rows)

SELECT
   user_id, time, my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (ORDER BY avg(event_type))
) as foo
WHERE
  my_rank > 1
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |           time           | my_rank
---------------------------------------------------------------------
       4 | Wed Nov 22 00:00:00 2017 |      12
       6 | Wed Nov 22 00:00:00 2017 |      11
       5 | Wed Nov 22 00:00:00 2017 |      10
       6 | Thu Nov 23 00:00:00 2017 |       9
       3 | Thu Nov 23 00:00:00 2017 |       8
       1 | Thu Nov 23 00:00:00 2017 |       7
       1 | Wed Nov 22 00:00:00 2017 |       6
       2 | Thu Nov 23 00:00:00 2017 |       5
       4 | Thu Nov 23 00:00:00 2017 |       4
       2 | Wed Nov 22 00:00:00 2017 |       3
(10 rows)

SELECT
   user_id, time, my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (PARTITION BY date_trunc('day', time) ORDER BY avg(event_type))
) as foo
WHERE
  my_rank > 1
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |           time           | my_rank
---------------------------------------------------------------------
       6 | Thu Nov 23 00:00:00 2017 |       6
       4 | Wed Nov 22 00:00:00 2017 |       6
       6 | Wed Nov 22 00:00:00 2017 |       5
       3 | Thu Nov 23 00:00:00 2017 |       5
       5 | Wed Nov 22 00:00:00 2017 |       4
       1 | Thu Nov 23 00:00:00 2017 |       4
       2 | Thu Nov 23 00:00:00 2017 |       3
       1 | Wed Nov 22 00:00:00 2017 |       3
       4 | Thu Nov 23 00:00:00 2017 |       2
       2 | Wed Nov 22 00:00:00 2017 |       2
(10 rows)

SELECT * FROM (
  SELECT
    user_id, date_trunc('day', time) as time, sum(rank) OVER w2
  FROM (
    SELECT DISTINCT
      user_id as user_id, time, rank() over w1
    FROM
      users_table
    WINDOW
      w AS (PARTITION BY time), w1 AS (w ORDER BY value_2, value_3)
  ) fab
  WINDOW
    w2 as (PARTITION BY user_id, time)
) a
ORDER BY
1,2,3;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id |           time           | sum
---------------------------------------------------------------------
       1 | Wed Nov 22 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |   1
       1 | Thu Nov 23 00:00:00 2017 |   1
       2 | Wed Nov 22 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       2 | Thu Nov 23 00:00:00 2017 |   1
       3 | Wed Nov 22 00:00:00 2017 |   1
       3 | Wed Nov 22 00:00:00 2017 |   1
       3 | Wed Nov 22 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       3 | Thu Nov 23 00:00:00 2017 |   1
       4 | Wed Nov 22 00:00:00 2017 |   1
       4 | Wed Nov 22 00:00:00 2017 |   1
       4 | Wed Nov 22 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       4 | Thu Nov 23 00:00:00 2017 |   1
       5 | Wed Nov 22 00:00:00 2017 |   1
       5 | Wed Nov 22 00:00:00 2017 |   1
       5 | Wed Nov 22 00:00:00 2017 |   1
       5 | Wed Nov 22 00:00:00 2017 |   1
       5 | Wed Nov 22 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       5 | Thu Nov 23 00:00:00 2017 |   1
       6 | Wed Nov 22 00:00:00 2017 |   1
       6 | Wed Nov 22 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
       6 | Thu Nov 23 00:00:00 2017 |   1
(101 rows)

SELECT * FROM (
  SELECT
    user_id, COUNT(*) OVER (PARTITION BY sum(user_id), MIN(value_2))
  FROM
    users_table
  GROUP BY
    user_id
) a
ORDER BY
  1 DESC, 2 DESC;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | count
---------------------------------------------------------------------
       6 |     1
       5 |     1
       4 |     1
       3 |     1
       2 |     1
       1 |     1
(6 rows)

-- test with reference table partitioned on only a column from reference table
SELECT *
FROM
(
    SELECT
      DISTINCT user_id, it_name, count(id) OVER (PARTITION BY id)
    FROM
      users_table, users_ref_test_table
) a
ORDER BY
  1, 2, 3
LIMIT
  20;
ERROR:  relation "users_ref_test_table" does not exist
SELECT
  max(avg)
FROM
(
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (1, 2))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (2, 3))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (3, 4))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (4, 5))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (5, 6))
    UNION ALL
  (SELECT avg(value_3) over (partition by event_type), user_id FROM events_table where event_type IN (1, 6))
) b
GROUP BY user_id
ORDER BY 1 DESC
LIMIT 5;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
       max
---------------------------------------------------------------------
                5
 3.09090909090909
                3
                3
            2.875
(5 rows)

SELECT *
FROM (
        ( SELECT user_id,
                 sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              events_table) user_id_1
         GROUP BY
          user_id)
      UNION
        (SELECT
            user_id, sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by event_type) AS counter
            FROM
              events_table) user_id_2
         GROUP BY
            user_id)) AS ftop
ORDER BY 2 DESC, 1 DESC
LIMIT 5;
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
WARNING:  list_length before removal: 0
WARNING:  list_length after removal: 0
 user_id | sum
---------------------------------------------------------------------
       5 | 596
       6 | 488
       1 | 488
       4 | 470
       2 | 470
(5 rows)

DROP VIEW subq;
